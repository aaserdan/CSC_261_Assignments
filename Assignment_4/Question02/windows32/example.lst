Microsoft (R) Macro Assembler Version 14.20.27508.1	    05/31/19 16:55:14
example.asm						     Page 1 - 1


				; Program to evaluate the harmonic mean of two numbers
				; 2xy / x + y
				; Author:  Arturo A. Serdan
				; Date:    05/31/2019

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000000		x	DWORD   ?
 00000004 00000000		y	DWORD   ?
 00000008 00000000		fx	DWORD	?

 0000000C 45 6E 74 65 72	prompt1 BYTE    "Enter x integer ", 0
	   20 78 20 69 6E
	   74 65 67 65 72
	   20 00
 0000001D 45 6E 74 65 72	prompt2 BYTE    "Enter y integer", 0
	   20 79 20 69 6E
	   74 65 67 65 72
	   00
 0000002D			string  BYTE    40 DUP (?)
 00000055 54 68 65 20 69	resultLbl BYTE  "The is the harmonic mean",0
	   73 20 74 68 65
	   20 68 61 72 6D
	   6F 6E 69 63 20
	   6D 65 61 6E 00
 0000006E  0000000B [		expr     BYTE   11 DUP (?), 0
	    00
	   ] 00
 0000007A 48 61 72 6D 6F	hMeanOut BYTE	"Harmonic value is ", 0ah, 0dh, 3 DUP (?), ".", '?', 0
	   6E 69 63 20 76
	   61 6C 75 65 20
	   69 73 20 0A 0D
	   00000003 [
	    00
	   ] 2E 3F 00


 00000000			.CODE
 00000000			_MainProc PROC
				        input   prompt1, string, 40      ; read ASCII characters
				        atod    string          ; convert to integer
 0000002D  A3 00000000 R	        mov     x, eax    ; store in memory

				        input   prompt2, string, 40      ; repeat for second number
				        atod    string
 0000005F  A3 00000004 R	        mov     y, eax
				        
				        
 00000064  F7 2D 00000000 R			imul x							; multiplies y*x
 0000006A  BB 00000014				mov ebx, 20						; moves 20 into ebx to  multiply
 0000006F  F7 EB				imul ebx						; multiplies xy by 20 in order to add an extra decimal when converting to ASCII

 00000071  A3 00000008 R			mov fx, eax						; moves result into fx
 00000076  99					cdq								; prepares edx for division
 00000077  8B 1D 00000000 R			mov	ebx, x						; moves x into ebx
 0000007D  03 1D 00000004 R			add	ebx, y						; adds x +y
 00000083  F7 FB				idiv ebx						; divides 20*x*y by x+y 

 00000085  A3 00000008 R			mov fx, eax						; moves the result into fx

						dtoa    expr, eax				; convert to ASCII characters
				        
 000000A2  8D 05 0000006E R			lea eax, expr
 000000A8  8D 1D 0000007A R			lea ebx, hMeanOut
 000000AE  8A 50 0A				mov dl, [eax+10]
 000000B1  88 53 18				mov [ebx+24], dl
 000000B4  8A 50 09				mov	dl, [eax+9]
 000000B7  88 53 16				mov [ebx+22], dl
 000000BA  8A 50 08				mov dl, [eax+8]
 000000BD  88 53 15				mov [ebx+21], dl
 000000C0  8A 50 07				mov dl, [eax+7]
 000000C3  88 53 14				mov [ebx+20], dl

						output  resultLbl , hMeanOut    ; output label and expression



 000000DF  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000E4  C3			        ret
 000000E5			_MainProc ENDP
				END                             ; end of source code

Microsoft (R) Macro Assembler Version 14.20.27508.1	    05/31/19 16:55:14
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000094 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E5 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
expr . . . . . . . . . . . . . .	Byte	 0000006E _DATA	
fx . . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
hMeanOut . . . . . . . . . . . .	Byte	 0000007A _DATA	
prompt1  . . . . . . . . . . . .	Byte	 0000000C _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000001D _DATA	
resultLbl  . . . . . . . . . . .	Byte	 00000055 _DATA	
string . . . . . . . . . . . . .	Byte	 0000002D _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
x  . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
y  . . . . . . . . . . . . . . .	DWord	 00000004 _DATA	

	   0 Warnings
	   0 Errors
