Microsoft (R) Macro Assembler Version 14.20.27508.1	    06/05/19 12:51:41
example.asm						     Page 1 - 1


				; a non-recursive algorithm to find the greatest
				; common divisor of two positive numbers.
				; Author:  Arturo A. Serdan
				; Date:    06/07/2019

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000000		a		DWORD   ?
 00000004 00000000		b		DWORD	?
 00000008 00000000		t		DWORD	?			 

 0000000C 00000000		number2 DWORD   ?
 00000010 45 6E 74 65 72	prompt1 BYTE    "Enter an A positive integer", 0
	   20 61 6E 20 41
	   20 70 6F 73 69
	   74 69 76 65 20
	   69 6E 74 65 67
	   65 72 00
 0000002C 45 6E 74 65 72	prompt2 BYTE    "Enter a B positive integer", 0
	   20 61 20 42 20
	   70 6F 73 69 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 00
 00000047  00000028 [		string  BYTE    40 DUP (?)
	    00
	   ]
 0000006F 54 68 65 20 47	resultLbl BYTE  "The Greater Common Divisor", 0
	   72 65 61 74 65
	   72 20 43 6F 6D
	   6D 6F 6E 20 44
	   69 76 69 73 6F
	   72 00
 0000008A  0000000B [		ans     BYTE    11 DUP (?), 0
	    00
	   ] 00

				;Displayed if an error occurs
 00000096 41 6E 20 65 72	ErrorRest BYTE	"An error occurred", 0
	   72 6F 72 20 6F
	   63 63 75 72 72
	   65 64 00
 000000A8 57 72 6F 6E 67	wrongInt  BYTE	"Wrong integer input",0
	   20 69 6E 74 65
	   67 65 72 20 69
	   6E 70 75 74 00


 00000000			.CODE
 00000000			_MainProc PROC
				        input   prompt1, string, 40      ; read ASCII characters
				        atod    string          ; convert to integer
 0000002D  A3 00000000 R	        mov     a, eax			; store in memory
 00000032  83 3D 00000000 R			cmp		a, 1			; compares a and 1
	   01
 00000039  0F 8C 00000084			jnge	erCode			; if a is less or equal to 1

				        input   prompt2, string, 40      ; repeat for second number
				        atod    string
 0000006C  A3 00000004 R	        mov     b, eax
 00000071  83 3D 00000004 R			cmp		b, 1			; compares b and 1
	   01
 00000078  7C 49				jnge	erCode			; if b is less or equal to 1
				        
 0000007A  FF 35 00000004 R			push	b				; b parameter
 00000080  FF 35 00000000 R			push	a				; a parameter
 00000086  E8 00000057				call	greatDiv		; greatDiv(a, b)
 0000008B  83 C4 08				add		esp, 8			; remove parameters from stack

				        dtoa    ans, eax        ; convert to ASCII characters
				        output  resultLbl, ans          ; output label and gcd
 000000BF  3B C0				cmp		eax,eax			; compares to itself to exit
 000000C1  74 19				je		exitCode		; jumps to exitCode

 000000C3				erCode:	
						output  ErrorRest, wrongInt          ; error output&label

 000000DC				exitCode:
 000000DC  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000E1  C3			        ret
 000000E2			_MainProc ENDP

				; int gdc(int a, int b) - takes two positive integers
				; returns the gdc(a,b)
				; do t = b, b = a, a = t mod a. while(a != 0). returns b
 000000E2			greatDiv PROC
						
 000000E2  55					push	ebp				; save base pointer 
 000000E3  8B EC				mov		ebp, esp		; establish stack frame 
 000000E5  53					push	ebx				; save EBX
 000000E6  52					push	edx				; save EDX
 000000E7  51					push	ecx				; save ECX
						
 000000E8  8B 4D 0C				mov		ecx, [ebp+12]	; places value of int b into ecx , value for b
 000000EB  8B 5D 08				mov		ebx, [ebp+8]	; places value of int a into ebx, value of a

 000000EE				loopDiv:
 000000EE  8B C1				mov		eax, ecx		; makes t (eax) equal to b (ecx), t = b
 000000F0  8B CB				mov		ecx, ebx		; makes b (ecx) equal to a (ebx), b = a
 000000F2  99					cdq						; prepares cdx for division
 000000F3  F7 F3				div	ebx					; divides t by a, (t/a)
 000000F5  8B DA				mov		ebx, edx		; makes puts the reminder into a (ebx), a = reminder
 000000F7  83 FA 00				cmp		edx, 0
 000000FA  75 F2			jnz loopDiv					; loop while a (reminder) is not 0
 000000FC  8B C1				mov		eax, ecx		; moves b into eax to return the value

 000000FE  59					pop		ecx				; restore EXC
 000000FF  5A					pop		edx				; restore EDX
 00000100  5B					pop		ebx				; restore EBX
 00000101  5D					pop		ebp				; restore EBP
 00000102  C3					ret						; return
 00000103			greatDiv ENDP					

				END                             ; end of source code

Microsoft (R) Macro Assembler Version 14.20.27508.1	    06/05/19 12:51:41
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000BC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000103 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E2 Public
  erCode . . . . . . . . . . . .	L Near	 000000C3 _TEXT	
  exitCode . . . . . . . . . . .	L Near	 000000DC _TEXT	
greatDiv . . . . . . . . . . . .	P Near	 000000E2 _TEXT	Length= 00000021 Public
  loopDiv  . . . . . . . . . . .	L Near	 000000EE _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ErrorRest  . . . . . . . . . . .	Byte	 00000096 _DATA	
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
ans  . . . . . . . . . . . . . .	Byte	 0000008A _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
a  . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
b  . . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
number2  . . . . . . . . . . . .	DWord	 0000000C _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000010 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000002C _DATA	
resultLbl  . . . . . . . . . . .	Byte	 0000006F _DATA	
string . . . . . . . . . . . . .	Byte	 00000047 _DATA	
t  . . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
wrongInt . . . . . . . . . . . .	Byte	 000000A8 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
